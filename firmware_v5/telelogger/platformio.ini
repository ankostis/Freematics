; PlatformIO Project Configuration File
;
;   Build options: build flags, source filter
;   Upload options: custom upload port, speed and extra flags
;   Library options: dependencies, extra library storages
;   Advanced options: extra scripting
;
; Please visit documentation for the other options and examples
; https://docs.platformio.org/page/projectconf.html

[env:esp32dev]
platform = https://github.com/platformio/platform-espressif32.git#v4.2.0
platform_packages = platformio/framework-arduinoespressif32 @ https://github.com/espressif/arduino-esp32.git#2.0.3-RC1
board = esp32dev
board_build.f_cpu = 160000000L
framework = arduino
monitor_speed = 115200
build_flags=
    ${env.build_flags}
    ; -DBOARD_HAS_PSRAM -mfix-esp32-psram-cache-issue

[platformio]
src_dir = .
lib_dir = ../../libraries
test_dir = ../sandbox

[env]
build_flags=
    ; Enable printf-warns below.
    ; For log-statements, ESP_IDF logging issues such warnings,
    ; prefer to disable colors.
    -Wformat
    !python build_flags-git-describe.py     ; Define GIT_DESCRIBE string.
    !python build_flags-username.py         ; Define BUILD_USERNAME string.

    ; INFO: ESP32-Arduino has 2 logging libraries
    ; (see respective envs, below, for pros & cons):
    ;   * ESP_IDF log-lib defined in "esp_log.h"
    ;   * ArduinoCore log-lib defined in "esp_hal_log.h"
    ; corresponding to 2 groups of log-statements:
    ;   * `ESP_LOGI(tag, format, ...)`
    ;   * `log_i(format, ...)`
    ; The purpose here is to have both log statement-groups work,
    ; regardless of which loggin system is selected.
    ;
    ; ATTENTION: enable ONLY ONE of the logging-macros below:
    ; ${arduino_logs.build_flags}     ; Simpler, with file:lineno info for local development
    ${esp_idf_logs.build_flags}     ; Re-routable (eg to MQTT), some tags still disabled

    ; NOTE: Arduino log-statements only work when this is numeric
    ; (and not eg `ESP_LOG_DEBUG`, which has the correct `esp_log_level_t` enum),
    ; but if numeric, older ESP_IDF platforms may WARN about the type-mismatch.
    -DCORE_DEBUG_LEVEL=ARDUHAL_LOG_LEVEL_INFO
    -DCONFIG_LOG_COLORS     ; Enable also `direct` in `monitor_filters`, below.

    ; BUG(Arduino-esp32-2.0.3-RC1 due to espressif/arduino-esp32#6534)
    ; if TAG undefined , compiler screams on each Arduino log-statement (eg `log_i()`)
    ; when ESP_IDF logging-system is selected above
    ; (ie CORE_DEBUG_LEVEL above is numeric).
    ;
    ; INFO: the 2 lines below make both log statement-groups under ESP_IDF logging
    ; have their visibility controlled on runtime based on their base-filename,
    ; like `esp_log_level_set("[libfolder/]filename", <level>)`.
    ;
    ; TIP: if you see full-paths when ESP_IDF-logs enabled, add their parent paths
    ; in the python-script, below.
    ;
    ; TIP: collect all tags there is by styding logs with verbose log-level.
    ;
    ; WARNINIG: many *build_flags* like those below raise Redefinition errors;
    ; must convert to *"arduino-esp3 as component of esp_idf"*
    ; for `makeconfig` command to modify them in `sdkconfig.defaults`.
    ; (see also espressif/arduino-esp32#893):
    ;   -DCONFIG_LOG_DEFAULT_LEVEL=...
    ;   -DCONFIG_BOOTLOADER_LOG_LEVEL=...
    ;   -DCONFIG_ARDUHAL_LOG_DEFAULT_LEVEL=...
    ;   -DARDUHAL_LOG_LEVEL=...
    ;   -DCONFIG_LOG_MAXIMUM_LEVEL=...
    ;   -DTAG=\#__FILE__    ; default for ARDUINO tags
    ;   -DCONFIG_LOG_TIMESTAMP_SOURCE_SYSTEM
    -DTAG=__FILE__
    !python build_flags-macro-prefix-map.py

monitor_filters = direct    ; to view colored logs, if enabled, above.

;###############
; Log through (simpler) Arduino-core logging-lib
; (which overrides ESP_IDF lib)
;
; * compile-time only
; * Per-file levels with LOG_LOCAL_LEVEL define
; * log-lines prefixed with source-loc (file: lineno) & (optional)
; * Used by `log_X(format, ...)` macros.
; * included by `esp-hal-log.h`
[arduino_logs]
build_flags=
    -DCONFIG_ARDUHAL_LOG_COLORS=CONFIG_LOG_COLORS

;###############
; Log through ESP_IDF logging-lib
;
; * Reroutable logs to multiple sinks
; * Levels per-TAG configurable on runtime
; * compile-time with LOG_LOCAL_LEVEL defines.
; * Used by `ESP_LOGx(tag, format, ...)` macros with TAG-defines per file.
; * included by `esp-log.h`
[esp_idf_logs]
build_flags=
    -DUSE_ESP_IDF_LOG
